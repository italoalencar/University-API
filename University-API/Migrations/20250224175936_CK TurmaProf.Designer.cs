// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using University_API.Data;

#nullable disable

namespace University_API.Migrations
{
    [DbContext(typeof(UniversityContext))]
    [Migration("20250224175936_CK TurmaProf")]
    partial class CKTurmaProf
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.36")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "situacao_type", new[] { "ativo", "inativo", "formado" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "status_type", new[] { "em andamento", "concluida", "reprovada", "trancada", "suprimida" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("University_API.Models.Aluno", b =>
                {
                    b.Property<string>("Matricula")
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("matricula");

                    b.Property<int?>("AnoIngresso")
                        .HasColumnType("integer")
                        .HasColumnName("ano_ingresso");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)")
                        .HasColumnName("cpf");

                    b.Property<DateOnly?>("DataNasc")
                        .HasColumnType("date")
                        .HasColumnName("data_nasc");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<int?>("IdCurso")
                        .HasColumnType("integer")
                        .HasColumnName("id_curso");

                    b.Property<string>("NomeCompleto")
                        .IsRequired()
                        .HasMaxLength(155)
                        .HasColumnType("character varying(155)")
                        .HasColumnName("nome_completo");

                    b.Property<string>("Telefone")
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)")
                        .HasColumnName("telefone");

                    b.HasKey("Matricula")
                        .HasName("alunos_pkey");

                    b.HasIndex("IdCurso");

                    b.ToTable("alunos");
                });

            modelBuilder.Entity("University_API.Models.Curso", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Campus")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("campus");

                    b.Property<int?>("CargaHoraria")
                        .HasColumnType("integer")
                        .HasColumnName("carga_horaria");

                    b.Property<string>("Nome")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("nome");

                    b.Property<string>("UnidadeAcademica")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("unidade_academica");

                    b.HasKey("Id");

                    b.ToTable("cursos");
                });

            modelBuilder.Entity("University_API.Models.Disciplina", b =>
                {
                    b.Property<string>("Cod")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("cod");

                    b.Property<int?>("CargaHoraria")
                        .HasColumnType("integer")
                        .HasColumnName("carga_horaria");

                    b.Property<string>("Ementa")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("ementa");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("nome");

                    b.HasKey("Cod")
                        .HasName("disciplinas_pkey");

                    b.ToTable("disciplinas");
                });

            modelBuilder.Entity("University_API.Models.HorarioTurma", b =>
                {
                    b.Property<string>("DiaSemana")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("dia_semana");

                    b.Property<int?>("IdTurma")
                        .HasColumnType("integer")
                        .HasColumnName("id_turma");

                    b.Property<TimeOnly?>("Inicio")
                        .HasColumnType("time without time zone")
                        .HasColumnName("inicio");

                    b.Property<TimeOnly?>("Termino")
                        .HasColumnType("time without time zone")
                        .HasColumnName("termino");

                    b.HasIndex("IdTurma");

                    b.ToTable("horario_turma");
                });

            modelBuilder.Entity("University_API.Models.Matricula", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DataMatricula")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_matricula");

                    b.Property<int?>("IdTurma")
                        .HasColumnType("integer")
                        .HasColumnName("id_turma");

                    b.Property<string>("MatriculaAluno")
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("matricula_aluno");

                    b.HasKey("Id");

                    b.HasIndex("IdTurma");

                    b.HasIndex("MatriculaAluno");

                    b.ToTable("matriculas");
                });

            modelBuilder.Entity("University_API.Models.Nota", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("IdMatricula")
                        .HasColumnType("integer")
                        .HasColumnName("id_matricula");

                    b.Property<float?>("Nota1")
                        .HasColumnType("real")
                        .HasColumnName("nota");

                    b.Property<float?>("Peso")
                        .HasColumnType("real")
                        .HasColumnName("peso");

                    b.Property<string>("Tipo")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("tipo");

                    b.HasKey("Id");

                    b.ToTable("notas");
                });

            modelBuilder.Entity("University_API.Models.PreRequisito", b =>
                {
                    b.Property<string>("CodDisciplina")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("cod_disciplina");

                    b.Property<string>("CodPreRequisito")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("cod_pre_requisito");

                    b.HasKey("CodDisciplina", "CodPreRequisito");

                    b.HasIndex("CodPreRequisito");

                    b.ToTable("pre_requisitos");
                });

            modelBuilder.Entity("University_API.Models.Professor", b =>
                {
                    b.Property<string>("Matricula")
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("matricula");

                    b.Property<string>("AreaAtuacao")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("area_atuacao");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)")
                        .HasColumnName("cpf");

                    b.Property<DateOnly?>("DataNasc")
                        .HasColumnType("date")
                        .HasColumnName("data_nasc");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<string>("NomeCompleto")
                        .IsRequired()
                        .HasMaxLength(155)
                        .HasColumnType("character varying(155)")
                        .HasColumnName("nome_completo");

                    b.Property<string>("Telefone")
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)")
                        .HasColumnName("telefone");

                    b.HasKey("Matricula")
                        .HasName("professores_pkey");

                    b.ToTable("professores");
                });

            modelBuilder.Entity("University_API.Models.Turma", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CodDisciplina")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("cod_disciplina");

                    b.Property<int?>("IdCurso")
                        .HasColumnType("integer")
                        .HasColumnName("id_curso");

                    b.Property<int?>("MaxAlunos")
                        .HasColumnType("integer")
                        .HasColumnName("max_alunos");

                    b.Property<int?>("QtdeAlunos")
                        .HasColumnType("integer")
                        .HasColumnName("qtde_alunos");

                    b.Property<string>("Semestre")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("semestre");

                    b.HasKey("Id");

                    b.HasIndex("CodDisciplina");

                    b.HasIndex("IdCurso");

                    b.ToTable("turmas");
                });

            modelBuilder.Entity("University_API.Models.TurmaProfessor", b =>
                {
                    b.Property<int?>("IdTurma")
                        .HasColumnType("integer")
                        .HasColumnName("id_turma");

                    b.Property<string>("MatriculaProf")
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("matricula_prof");

                    b.HasKey("IdTurma", "MatriculaProf");

                    b.HasIndex("MatriculaProf");

                    b.ToTable("turma_professor");
                });

            modelBuilder.Entity("University_API.Models.Aluno", b =>
                {
                    b.HasOne("University_API.Models.Curso", "IdCursoNavigation")
                        .WithMany("Alunos")
                        .HasForeignKey("IdCurso")
                        .HasConstraintName("alunos_id_curso_fkey");

                    b.Navigation("IdCursoNavigation");
                });

            modelBuilder.Entity("University_API.Models.HorarioTurma", b =>
                {
                    b.HasOne("University_API.Models.Turma", "IdTurmaNavigation")
                        .WithMany()
                        .HasForeignKey("IdTurma")
                        .HasConstraintName("horario_turma_id_turma_fkey");

                    b.Navigation("IdTurmaNavigation");
                });

            modelBuilder.Entity("University_API.Models.Matricula", b =>
                {
                    b.HasOne("University_API.Models.Turma", "IdTurmaNavigation")
                        .WithMany("Matriculas")
                        .HasForeignKey("IdTurma")
                        .HasConstraintName("matriculas_id_turma_fkey");

                    b.HasOne("University_API.Models.Aluno", "MatriculaAlunoNavigation")
                        .WithMany("Matriculas")
                        .HasForeignKey("MatriculaAluno")
                        .HasConstraintName("matriculas_matricula_aluno_fkey");

                    b.Navigation("IdTurmaNavigation");

                    b.Navigation("MatriculaAlunoNavigation");
                });

            modelBuilder.Entity("University_API.Models.PreRequisito", b =>
                {
                    b.HasOne("University_API.Models.Disciplina", "CodDisciplinaNavigation")
                        .WithMany()
                        .HasForeignKey("CodDisciplina")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("pre_requisitos_cod_disciplina_fkey");

                    b.HasOne("University_API.Models.Disciplina", "CodPreRequisitoNavigation")
                        .WithMany()
                        .HasForeignKey("CodPreRequisito")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("pre_requisitos_cod_pre_requisito_fkey");

                    b.Navigation("CodDisciplinaNavigation");

                    b.Navigation("CodPreRequisitoNavigation");
                });

            modelBuilder.Entity("University_API.Models.Turma", b =>
                {
                    b.HasOne("University_API.Models.Disciplina", "CodDisciplinaNavigation")
                        .WithMany("Turmas")
                        .HasForeignKey("CodDisciplina")
                        .HasConstraintName("turmas_cod_disciplina_fkey");

                    b.HasOne("University_API.Models.Curso", "IdCursoNavigation")
                        .WithMany("Turmas")
                        .HasForeignKey("IdCurso")
                        .HasConstraintName("turmas_id_curso_fkey");

                    b.Navigation("CodDisciplinaNavigation");

                    b.Navigation("IdCursoNavigation");
                });

            modelBuilder.Entity("University_API.Models.TurmaProfessor", b =>
                {
                    b.HasOne("University_API.Models.Turma", "IdTurmaNavigation")
                        .WithMany()
                        .HasForeignKey("IdTurma")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("turma_professor_id_turma_fkey");

                    b.HasOne("University_API.Models.Professor", "MatriculaProfNavigation")
                        .WithMany()
                        .HasForeignKey("MatriculaProf")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("turma_professor_matricula_prof_fkey");

                    b.Navigation("IdTurmaNavigation");

                    b.Navigation("MatriculaProfNavigation");
                });

            modelBuilder.Entity("University_API.Models.Aluno", b =>
                {
                    b.Navigation("Matriculas");
                });

            modelBuilder.Entity("University_API.Models.Curso", b =>
                {
                    b.Navigation("Alunos");

                    b.Navigation("Turmas");
                });

            modelBuilder.Entity("University_API.Models.Disciplina", b =>
                {
                    b.Navigation("Turmas");
                });

            modelBuilder.Entity("University_API.Models.Turma", b =>
                {
                    b.Navigation("Matriculas");
                });
#pragma warning restore 612, 618
        }
    }
}
